import {
  Injectable, 
  CanActivate,
  ExecutionContext,
  UnauthorizedException,
} from '@nestjs/common';
import { JwtService } from '@nestjs/jwt';
import { WsException } from '@nestjs/websockets';

@Injectable()
export class JwtAuthGuard implements CanActivate {
  constructor(
    private jwtService: JwtService,
  ) {}

  canActivate(context: ExecutionContext): boolean {
    // Determinar si es HTTP o WebSocket
    const isWs = context.getType() === 'ws';
    const client = isWs 
      ? context.switchToWs().getClient() 
      : context.switchToHttp().getRequest();
    
    const request = isWs ? client.handshake : client.headers;
    let token: string | null = null;

    const authHeader = request.authorization;
    if (authHeader && typeof authHeader === 'string' && authHeader.startsWith('Bearer ')) {
      token = authHeader.split(' ')[1];
    }
    else if (isWs && client.handshake.query?.token) {
      token = Array.isArray(client.handshake.query.token)
        ? client.handshake.query.token[0]
        : client.handshake.query.token;
    }

    if (!token) {
      throw isWs 
        ? new WsException('Missing or invalid token') 
        : new UnauthorizedException('Missing or invalid token');
    }

    try {
      const decoded = this.jwtService.verify(token);
      // Asegurar que el decoded tiene la estructura correcta
      // Validamos la estructura del token
      if (!decoded.sub || !decoded.email) {
        throw new UnauthorizedException('Invalid token structure');
      }
      // Extraer roles de cognito:groups
      const roles = decoded['cognito:groups'] || [];
      const user = {
        userId: decoded.sub, // El sub de Cognito es el ID Ãºnico
        email: decoded.email,
        roles: roles,
      };
      if (!decoded.roles || !Array.isArray(decoded.roles)) {
        throw new UnauthorizedException('Roles no definidos en el token');
      }
      if (isWs) {
        client.data.user = user;
      } else {
        client.user = user;
      }
      return true;
    } catch (error) {
      throw isWs
        ? new WsException('Invalid token')
        : new UnauthorizedException('Invalid token');
    }
  }
}
